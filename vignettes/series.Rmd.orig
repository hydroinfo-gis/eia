---
title: "EIA time series data"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{EIA time series data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>", out.width = "100%",
  fig.width = 7, fig.height = 4, dev = "CairoPNG", dpi = 150, fig.path = "series-",
  message = FALSE, warning = FALSE, error = FALSE
)
library(eia)
options(eia_antidos = 0)
```

## Finding the series ID

Like category information, time series data is obtained based on its ID. A complete example includes finding the ID for the series if you do not already know it. Chances are you may already know the series IDs you need after using the API explorer on the EIA website. Below, look for total electricity consumption.

```{r cat1}
library(eia)
# eia_set_key("yourkey") # set API key if not already set globally
eia_cats()
```

Electricity has category ID 0. Take a closer look there.

```{r cat2}
eia_cats(0)
```

There are two categories referring to total consumption. Take category ID 32 as an example and step deeper into the category hierarchy.

```{r cat3}
eia_cats(32)
```

At this point you have a choice between total consumption by sector or fuel type. Select by sector.

```{r cat4}
eia_cats(372)
```

Then total electrical power.

```{r cat5}
eia_cats(388)
```

And finally coal.

```{r cat6}
(x <- eia_cats(738))
```

## Available child series

At this point you have reached a terminal node of the category tree. Instead of another table of child category IDs and names in the result, there is a `childseries` table.

This table contains:

*    time series IDs
*    names that describe the nested position of the data in the overall category hierarchy
*    time format
*    units
*    the time stamp of the most recent data update

Each row in this table represents a unique time series dataset; in this case for different states and in annual, quarterly and monthly time steps. TO obtain the time series data, make a request using `eia_series` and provide a series ID.

## Time formats

To see how the different time formats are parsed, take the first three IDs for Alaska. Request only the three most recent results for each series.

```{r series1}
id <- x$childseries$series_id[1:3]
x1 <- eia_series(id[1], n = 3)
x2 <- eia_series(id[2], n = 3)
x3 <- eia_series(id[3], n = 3)
```

The format of each result is the same. Inspect the first one. It is a data frame with one row. All but the final column, `data`, give metadata about the series. `data` is a list column (in this case of length one) that can be extracted directly or unnested using `tidyr::unnest`.

```{r series2}
library(dplyr)
library(tidyr)
library(ggplot2)

x1$data[[1]]

select(x1, series_id, data) %>% unnest(cols = data)

unnest(x1, cols = data) %>%
  ggplot(aes(factor(year), value)) + geom_col() +
  labs(x = "Year", y = x1$units, title = "Total Alaska electricity consumption",
       subtitle = "From coal sources", caption = x1$description)
```

Results are similarly structured for the other series, but the columns containing date information differ.

```{r series3}
x1$data[[1]]
x2$data[[1]]
x3$data[[1]]
```

## Multiple series

The EIA API allows multiple series to be requested in a single API call. You should do this whenever possible to reduce the number of requests you make. To request the same data as above, just provide the `id` vector. Other arguments like `n` are not vectorized.

```{r series4}
x <- eia_series(id, n = 3)
x
```

There are now three rows in the table containing the same data as before. The `data` list column also contains the same structures as before.

```{r series5}
x$data
```

These can be unnested and filled in with `NA` as needed.

```{r series6}
select(x, series_id, data) %>% unnest(cols = data)
```

## Time period and number of results

Here are some things to keep in mind about `eia_series` arguments.

* The function only makes one API call, combining multiple series IDs if provided.
* If there are fewer results than you request, everything available is returned.
* Results are from the most recent unless using `start` alone.
* If you provide `start` and `end`, `n` is ignored.
* If you do not provide a closed period or `n`, you will receive all relevant data available, subject to any API limits.
* Depending on the nature of the request, you may have to construct more than one call.

```{r series7, eval = FALSE}
eia_series(id, n = 10)
eia_series(id, end = 2016, n = 5)
eia_series(id, start = 2000, end = 2016)
```

## Output format

The default is to return tidy data in a tibble data frame. You can set `tidy = FALSE` to return the list returned by `jsonlite::fromJSON` without any further processing.

```{r series8}
eia_series(id, n = 3, tidy = FALSE)
```

You can also return the raw JSON data in a character string if you need to process this directly with other code.

```{r series9}
cat(eia_series(id, n = 3, tidy = NA))
```

This allows you to use the returned results with existing code you may have that requires data in one of these less processed structures.

## Helpers functions

### Time series metadata

There are some functions available that make small API calls and return only metadata associated with a time series dataset.

```{r series10}
eia_series_metadata(id)
eia_series_updates(id)
eia_series_dates(id)
eia_series_range(id)
eia_series_cats(id)
```

Like `eia_seires`, these functions accept an `id` vector. They always return a tibble data frame. `eia_series_cats` uses the `series categories` endpoint and accepts the `tidy` argument so that output from the endpoint may be a JSON string, list or the tibble data frame.

### EIA date strings

EIA date strings used to specify start and end dates for time series requests are character strings that are not in any standard date formats. There are several functions that assist with moving between these strings and standard dates.

You can convert EIA date strings to dates.

```{r series11}
eiadate_to_date(c("201803", "201804"))
```

or dates to EIA format; here are examples using annual, quarterly and monthly time formats.

```{r series12}
date_to_eiadate("2018-05-14", "A")
date_to_eiadate("2018-05-14", "Q")
date_to_eiadate("2018-05-14", "M")
```

It is also easy to create a date sequence from two EIA time stamps. The format is parsed from the first value (they are intended to always be consistent).

```{r series13}
(x <- eiadate_to_date_seq("2018Q1", "2018Q4"))
date_to_eiadate(x)
```

## Checking for data updates

It is good practice to minimize the number of API calls you make wherever possible. One way to do this is to not request data that has not changed since you last requested it. You can make an API call to the EIA `updates` endpoint to check update times on data series. If any series have not been updated since you last obtained the data, then you know you do not need to request the data again.

The `eia_series_updates` function shown above is handy for checking the most recent data update times of a specific set of series IDs. However, it must make one or more API calls to do so. For general checks on a potentially large number of series without having to query them all, you should use `eia_updates`. This function takes a category ID and can return the last update times for all series under that category.

If a category level has no series directly associated with it, an empty data frame is returned.

```{r updates}
eia_updates(389)
```

If a category has series available, paginated results are returned in a data frame. You can use `n` and `start` (together, unlike for general data requests with `eia_series`) to indicate how many rows to return and where to start. This helps you to cycle through pages of results. By default, `n = 50` and `start = 1`. The EIA API `updates` endpoint allows a maximum of `n = 10000`.

```{r updates2}
eia_updates(742, n = 5)
```

Set `deep = TRUE` to obtain series associated with child categories. Category 389 above did not have series, but some of the child categories do.

```{r updates3}
eia_updates(389, n = 5, deep = TRUE)
```

The above example works to show this while using `n = 5` because there were no results for the top parent category. if there had been, it would likely be necessary to request more results in order to see that child series were included.
